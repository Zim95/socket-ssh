---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: podsnservices-cluster-role
rules:
- apiGroups: [""]
  resources: ["pods", "pods/exec", "services", "services/status", "secrets"]
  verbs: ["list", "create", "delete", "get"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: podsnservices-sa
  namespace: ${NAMESPACE} # Namespace placeholder
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: podsnservices-cluster-role-binding
subjects:
- kind: ServiceAccount
  name: podsnservices-sa
  namespace: ${NAMESPACE} # Namespace placeholder
roleRef:
  kind: ClusterRole
  name: podsnservices-cluster-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: socket-ssh-development
  namespace: ${NAMESPACE}
  labels:
    app: socket-ssh-development
spec:
  replicas: 1
  selector:
    matchLabels:
      app: socket-ssh-development
  template:
    metadata:
      labels:
        app: socket-ssh-development
    spec:
      containers:
      - name: socket-ssh-development
        image: zim95/socket-ssh-development:latest
        ports:
        - containerPort: 8000
        # env:
        # - name: SERVER_KEY
        #   valueFrom:
        #     secretKeyRef:
        #       name: container-maker-development-service-certs
        #       key: server.key
        # - name: SERVER_CRT
        #   valueFrom:
        #     secretKeyRef:
        #       name: container-maker-development-service-certs
        #       key: server.crt
        # - name: CLIENT_KEY
        #   valueFrom:
        #     secretKeyRef:
        #       name: container-maker-development-service-certs
        #       key: client.key
        # - name: CLIENT_CRT
        #   valueFrom:
        #     secretKeyRef:
        #       name: container-maker-development-service-certs
        #       key: client.crt
        # - name: CA_CRT
        #   valueFrom:
        #     secretKeyRef:
        #       name: container-maker-development-service-certs
        #       key: ca.crt
        volumeMounts:
        - name: app-code
          mountPath: /app
      volumes:
      - name: app-code
        hostPath:
          path: ${HOSTPATH}
          type: DirectoryOrCreate
---
apiVersion: v1
kind: Service
metadata:
  name: socket-ssh-development-service
  namespace: ${NAMESPACE} # Namespace placeholder
spec:
  selector:
    app: socket-ssh-development
  ports:
    - protocol: TCP
      port: 8000     # The port exposed by the service
      targetPort: 8000  # The container's port
  type: ClusterIP  # Use LoadBalancer or NodePort if external access is needed
